#include <iostream>
#include <windows.h>

#include "Matrix.hpp"
#include "Vector.hpp"
#include "LogisticRegression.hpp"

using std::cout;
using std::endl;
using namespace Math;

const double DecisionThreshold = 0.5;   // 判决门限

const size_t DataNumber = 9;    // 原始数据数量
const size_t Dimension = 5;     // 数据维度

using RawDataType = const Matrix<DataNumber, Dimension + 1>;
RawDataType &getRawData() { // 原始样本数据
    static RawDataType RawData {
        {0.8147, 0.9058, 0.1270, 0.9134, 0.6324, 1},
        {0.0975, 0.2785, 0.5469, 0.9575, 0.9649, 1},
        {0.1576, 0.9706, 0.9572, 0.4854, 0.8003, 1},
        {0.1419, 0.4218, 0.9157, 0.7922, 0.9595, 1},
        {0.6557, 0.0357, 0.8491, 0.9340, 0.6787, 1},
        {0.7577, 0.7431, 0.3922, 0.6555, 0.1712, 0},
        {0.7060, 0.0318, 0.2769, 0.0462, 0.0971, 1},
        {0.8235, 0.6948, 0.3171, 0.9502, 0.0344, 0},
        {0.4387, 0.3816, 0.7655, 0.7952, 0.1869, 0},
    };
    return RawData;
}

inline std::string result(double possibility) {
    if (possibility >= DecisionThreshold) {
        return "Positive";
    } else {
        return "Negative";
    }
}

int main() {
    const size_t FitTimes = 1000000;    // 拟合次数
    const double LearningRate = 0.1;    // 学习率

    LogisticRegression<Dimension> lr(LearningRate, 1);  // 初始化Logistic回归对象，初始权重设为全1

    // 打印原始样本数据
    cout << "RawData: " << DataNumber << " * " << Dimension << endl;
    cout << getRawData() << endl;
    cout << endl;

    // 打印拟合参数
    cout << "InitWeight = " << "[" << (lr.getWeight() ^ T) << "]" << endl;
    cout << "FitTimes = " << FitTimes << endl;
    cout << "LearningRate = " << LearningRate << endl;
    cout << "DecisionThreshold = " << DecisionThreshold << endl;
    cout << endl;

    lr.fit<DataNumber>(getRawData(), FitTimes); // 使用原始样本数据进行拟合

    // 打印结果
    cout << "ResultWeight = " << "[" << (lr.getWeight() ^ T) << "]" << endl;  // 打印训练结果权重
    cout << endl;
    MessageBox(nullptr, "Hello, World!", "Message", MB_OK);

    return 0;
}
